#!/bin/bash

# myClip Chrome Extension Advanced Packaging Tool
# Version: 2.0.0
# Description: ÏôÑÏ†Ñ ÏûêÎèôÌôîÎêú Chrome ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ìå®ÌÇ§Ïßï Î∞è Î∞∞Ìè¨ ÎèÑÍµ¨

set -euo pipefail  # ÏóÑÍ≤©Ìïú Ïò§Î•ò Ï≤òÎ¶¨

# Ï†ÑÏó≠ Î≥ÄÏàò
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME=$(basename "$0")
VERSION="2.0.0"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# ÏÉâÏÉÅ Î∞è Ïù¥Î™®ÏßÄ Ï†ïÏùò
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color

# Î°úÍ∑∏ Î†àÎ≤®
readonly LOG_ERROR=1
readonly LOG_WARN=2
readonly LOG_INFO=3
readonly LOG_DEBUG=4
LOG_LEVEL=${LOG_LEVEL:-3}

# ÏÑ§Ï†ï Î≥ÄÏàò
PACKAGE_NAME=""
PACKAGE_VERSION=""
BUILD_TYPE="release"
OUTPUT_DIR="dist"
TEMP_DIR=""
VALIDATE_ONLY=false
FORCE_BUILD=false
OPEN_STORE=false
AUTO_INSTALL=false

# Î°úÍ∑∏ Ìï®ÏàòÎì§
log() {
    local level=$1
    local message=$2
    local emoji=$3
    
    if [ "$level" -le "$LOG_LEVEL" ]; then
        echo -e "${emoji} ${message}" >&2
    fi
}

log_error() { log $LOG_ERROR "${RED}[ERROR]${NC} $1" "‚ùå"; }
log_warn() { log $LOG_WARN "${YELLOW}[WARN]${NC} $1" "‚ö†Ô∏è "; }
log_info() { log $LOG_INFO "${BLUE}[INFO]${NC} $1" "‚ÑπÔ∏è "; }
log_success() { log $LOG_INFO "${GREEN}[SUCCESS]${NC} $1" "‚úÖ"; }
log_debug() { log $LOG_DEBUG "${PURPLE}[DEBUG]${NC} $1" "üêõ"; }

# ÎèÑÏõÄÎßê Ï∂úÎ†•
show_help() {
    cat << EOF
${WHITE}myClip Chrome Extension Packaging Tool v${VERSION}${NC}

${CYAN}ÏÇ¨Ïö©Î≤ï:${NC}
    $SCRIPT_NAME [ÏòµÏÖò]

${CYAN}ÏòµÏÖò:${NC}
    -h, --help              Ïù¥ ÎèÑÏõÄÎßêÏùÑ ÌëúÏãúÌï©ÎãàÎã§
    -v, --version           Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º ÌëúÏãúÌï©ÎãàÎã§
    -t, --type TYPE         ÎπåÎìú ÌÉÄÏûÖ (release|debug) [Í∏∞Î≥∏Í∞í: release]
    -o, --output DIR        Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ [Í∏∞Î≥∏Í∞í: dist]
    -n, --name NAME         Ìå®ÌÇ§ÏßÄ Ïù¥Î¶Ñ (Í∏∞Î≥∏Í∞í: manifest.jsonÏóêÏÑú Ï∂îÏ∂ú)
    -f, --force             Í∏∞Ï°¥ ÌååÏùºÏùÑ Í∞ïÏ†úÎ°ú ÎçÆÏñ¥ÏîÅÎãàÎã§
    -c, --validate          Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨Îßå ÏàòÌñâÌïòÍ≥† Ï¢ÖÎ£åÌï©ÎãàÎã§
    -s, --store             Ìå®ÌÇ§Ïßï ÏôÑÎ£å ÌõÑ Chrome Web Store Ïó¥Í∏∞
    -i, --install           Ìå®ÌÇ§Ïßï ÏôÑÎ£å ÌõÑ ChromeÏóê ÏûêÎèô ÏÑ§Ïπò
    -d, --debug             ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî
    -q, --quiet             Ï°∞Ïö©Ìïú Î™®Îìú (Ïò§Î•òÎßå Ï∂úÎ†•)

${CYAN}ÏòàÏ†ú:${NC}
    $SCRIPT_NAME                           # Í∏∞Î≥∏ Î¶¥Î¶¨Ïä§ ÎπåÎìú
    $SCRIPT_NAME -t debug -d               # ÎîîÎ≤ÑÍ∑∏ ÎπåÎìú
    $SCRIPT_NAME -c                        # Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨Îßå
    $SCRIPT_NAME -f -s                     # Í∞ïÏ†ú ÎπåÎìú ÌõÑ Ïä§ÌÜ†Ïñ¥ Ïó¥Í∏∞
    $SCRIPT_NAME -i --output build         # ÎπåÎìú ÌõÑ ÏûêÎèô ÏÑ§Ïπò

${CYAN}ÏßÄÏõê Í∏∞Îä•:${NC}
    ‚Ä¢ ÏûêÎèô Î≤ÑÏ†Ñ Í∞êÏßÄ Î∞è Ìå®ÌÇ§Ïßï
    ‚Ä¢ ÌååÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
    ‚Ä¢ ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ± (ÎàÑÎùΩÏãú)
    ‚Ä¢ ÏïïÏ∂ï ÏµúÏ†ÅÌôî
    ‚Ä¢ Chrome Web Store Ïó∞Îèô
    ‚Ä¢ ÏûêÎèô ÏÑ§Ïπò ÏßÄÏõê
    ‚Ä¢ ÏÉÅÏÑ∏Ìïú Î°úÍ∑∏ Î∞è Ïò§Î•ò Ï≤òÎ¶¨

EOF
}

# Î≤ÑÏ†Ñ Ï†ïÎ≥¥ Ï∂úÎ†•
show_version() {
    echo "myClip Packaging Tool v${VERSION}"
    echo "Chrome Extension Builder"
}

# Î™ÖÎ†πÌñâ Ïù∏Ïûê ÌååÏã±
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -t|--type)
                BUILD_TYPE="$2"
                if [[ "$BUILD_TYPE" != "release" && "$BUILD_TYPE" != "debug" ]]; then
                    log_error "ÏûòÎ™ªÎêú ÎπåÎìú ÌÉÄÏûÖ: $BUILD_TYPE (release ÎòêÎäî debugÎßå ÌóàÏö©)"
                    exit 1
                fi
                shift 2
                ;;
            -o|--output)
                OUTPUT_DIR="$2"
                shift 2
                ;;
            -n|--name)
                PACKAGE_NAME="$2"
                shift 2
                ;;
            -f|--force)
                FORCE_BUILD=true
                shift
                ;;
            -c|--validate)
                VALIDATE_ONLY=true
                shift
                ;;
            -s|--store)
                OPEN_STORE=true
                shift
                ;;
            -i|--install)
                AUTO_INSTALL=true
                shift
                ;;
            -d|--debug)
                LOG_LEVEL=4
                shift
                ;;
            -q|--quiet)
                LOG_LEVEL=1
                shift
                ;;
            *)
                log_error "Ïïå Ïàò ÏóÜÎäî ÏòµÏÖò: $1"
                echo "ÎèÑÏõÄÎßêÏùÑ Î≥¥Î†§Î©¥ '$SCRIPT_NAME --help'Î•º Ïã§ÌñâÌïòÏÑ∏Ïöî."
                exit 1
                ;;
        esac
    done
}

# ÌïÑÏàò ÎèÑÍµ¨ ÌôïÏù∏
check_dependencies() {
    log_info "ÌïÑÏàò ÎèÑÍµ¨ ÌôïÏù∏ Ï§ë..."
    
    local missing_tools=()
    
    # zip Î™ÖÎ†πÏñ¥ ÌôïÏù∏
    if ! command -v zip >/dev/null 2>&1; then
        missing_tools+=("zip")
    fi
    
    # jq ÌôïÏù∏ (JSON ÌååÏã±Ïö©)
    if ! command -v jq >/dev/null 2>&1; then
        log_warn "jqÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. JSON ÌååÏã±Ïù¥ Ï†úÌïúÎê©ÎãàÎã§."
    fi
    
    # Python ÌôïÏù∏ (ÏïÑÏù¥ÏΩò ÏÉùÏÑ±Ïö©)
    if ! command -v python3 >/dev/null 2>&1; then
        log_warn "Python3Í∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ±Ïù¥ Ï†úÌïúÎê©ÎãàÎã§."
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_error "Îã§Ïùå ÎèÑÍµ¨Îì§Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§: ${missing_tools[*]}"
        exit 1
    fi
    
    log_success "Î™®Îì† ÌïÑÏàò ÎèÑÍµ¨Í∞Ä Ï§ÄÎπÑÎêòÏóàÏäµÎãàÎã§"
}

# manifest.json Í≤ÄÏ¶ù Î∞è Ï†ïÎ≥¥ Ï∂îÏ∂ú
validate_manifest() {
    log_info "manifest.json Í≤ÄÏ¶ù Ï§ë..."
    
    if [ ! -f "manifest.json" ]; then
        log_error "manifest.json ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"
        exit 1
    fi
    
    # JSON Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if command -v jq >/dev/null 2>&1; then
        if ! jq empty manifest.json 2>/dev/null; then
            log_error "manifest.jsonÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ JSON ÌòïÏãùÏûÖÎãàÎã§"
            exit 1
        fi
        
        # ÌïÑÏàò ÌïÑÎìú Í≤ÄÏ¶ù
        local required_fields=("manifest_version" "name" "version")
        for field in "${required_fields[@]}"; do
            if ! jq -e ".$field" manifest.json >/dev/null 2>&1; then
                log_error "manifest.jsonÏóê ÌïÑÏàò ÌïÑÎìúÍ∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§: $field"
                exit 1
            fi
        done
        
        # Ï†ïÎ≥¥ Ï∂îÏ∂ú
        PACKAGE_VERSION=$(jq -r '.version' manifest.json)
        if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME=$(jq -r '.name' manifest.json | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
        fi
    else
        # jq ÏóÜÏù¥ Í∞ÑÎã®Ìïú Ï∂îÏ∂ú
        PACKAGE_VERSION=$(grep -o '"version":[[:space:]]*"[^"]*"' manifest.json | cut -d'"' -f4)
        if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME="myClip"
        fi
    fi
    
    if [ -z "$PACKAGE_VERSION" ]; then
        log_error "manifest.jsonÏóêÏÑú Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"
        exit 1
    fi
    
    log_success "manifest.json Í≤ÄÏ¶ù ÏôÑÎ£å (Î≤ÑÏ†Ñ: $PACKAGE_VERSION)"
}

# ÌïÑÏàò ÌååÏùº Í≤ÄÏ¶ù
validate_files() {
    log_info "ÌïÑÏàò ÌååÏùº Í≤ÄÏ¶ù Ï§ë..."
    
    local required_files=(
        "manifest.json"
        "background.js"
        "content.js"
        "popup.html"
        "popup.js"
        "options.html"
        "options.js"
        "styles.css"
        "emailjs.min.js"
    )
    
    local missing_files=()
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        else
            log_debug "‚úì $file"
        fi
    done
    
    # ÏïÑÏù¥ÏΩò Í≤ÄÏ¶ù
    local icon_files=("icons/icon16.png" "icons/icon48.png" "icons/icon128.png")
    local missing_icons=()
    
    for icon in "${icon_files[@]}"; do
        if [ ! -f "$icon" ]; then
            missing_icons+=("$icon")
        else
            log_debug "‚úì $icon"
        fi
    done
    
    # ÎàÑÎùΩÎêú ÌååÏùº Ï≤òÎ¶¨
    if [ ${#missing_files[@]} -gt 0 ]; then
        log_error "Îã§Ïùå ÌïÑÏàò ÌååÏùºÎì§Ïù¥ ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§:"
        for file in "${missing_files[@]}"; do
            echo "  ‚ùå $file"
        done
        exit 1
    fi
    
    # ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ± ÏãúÎèÑ
    if [ ${#missing_icons[@]} -gt 0 ]; then
        log_warn "ÎàÑÎùΩÎêú ÏïÑÏù¥ÏΩòÏù¥ ÏûàÏäµÎãàÎã§: ${missing_icons[*]}"
        if [ "$FORCE_BUILD" = true ] && command -v python3 >/dev/null 2>&1; then
            generate_missing_icons
        else
            log_info "generate_icons.htmlÏùÑ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïã§ÌñâÌïòÏó¨ ÏïÑÏù¥ÏΩòÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî"
            log_info "ÎòêÎäî -f ÏòµÏÖòÏúºÎ°ú ÏûêÎèô ÏÉùÏÑ±ÏùÑ ÏãúÎèÑÌï† Ïàò ÏûàÏäµÎãàÎã§"
        fi
    fi
    
    log_success "ÌååÏùº Í≤ÄÏ¶ù ÏôÑÎ£å"
}

# ÎàÑÎùΩÎêú ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ±
generate_missing_icons() {
    log_info "ÎàÑÎùΩÎêú ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ± Ï§ë..."
    
    if [ ! -d "icons" ]; then
        mkdir -p icons
    fi
    
    python3 -c "
from PIL import Image, ImageDraw
import os

def create_icon(size):
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # ÌååÎûÄÏÉâ Î∞∞Í≤Ω
    margin = 1
    draw.ellipse([margin, margin, size-margin, size-margin], 
                fill='#007bff', outline='#0056b3', width=1)
    
    # ÌÅ¥Î¶Ω Î™®Ïñë
    if size >= 32:
        center_x, center_y = size // 2, size // 2
        clip_width = size // 12
        clip_height = size // 2
        
        draw.rectangle([
            center_x - clip_width, center_y - clip_height//2,
            center_x, center_y + clip_height//2
        ], fill='white')
        
        draw.rectangle([
            center_x - clip_width//2, center_y - clip_height//2,
            center_x + clip_width, center_y - clip_height//3
        ], fill='white')
        
        draw.rectangle([
            center_x + clip_width//2, center_y - clip_height//3,
            center_x + clip_width, center_y + clip_width
        ], fill='white')
    else:
        center_x, center_y = size // 2, size // 2
        draw.rectangle([center_x-2, center_y-4, center_x-1, center_y+4], fill='white')
        draw.rectangle([center_x-2, center_y-4, center_x+2, center_y-3], fill='white')
        draw.rectangle([center_x+1, center_y-3, center_x+2, center_y+1], fill='white')
    
    return img

# ÏïÑÏù¥ÏΩò ÏÉùÏÑ±
sizes = [16, 48, 128]
for size in sizes:
    filename = f'icons/icon{size}.png'
    if not os.path.exists(filename):
        icon = create_icon(size)
        icon.save(filename, 'PNG')
        print(f'Generated {filename}')
" 2>/dev/null && log_success "ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ± ÏôÑÎ£å" || log_warn "ÏïÑÏù¥ÏΩò ÏûêÎèô ÏÉùÏÑ± Ïã§Ìå®"
}

# ÎπåÎìú ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ
prepare_build_dir() {
    local build_name="${PACKAGE_NAME}_v${PACKAGE_VERSION}"
    if [ "$BUILD_TYPE" = "debug" ]; then
        build_name="${build_name}_debug"
    fi
    build_name="${build_name}_${TIMESTAMP}"
    
    TEMP_DIR="$OUTPUT_DIR/$build_name"
    
    log_info "ÎπåÎìú ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ Ï§ë: $TEMP_DIR"
    
    if [ -d "$OUTPUT_DIR" ] && [ "$FORCE_BUILD" != true ]; then
        if [ "$(ls -A "$OUTPUT_DIR" 2>/dev/null)" ]; then
            read -p "Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ '$OUTPUT_DIR'Í∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏäµÎãàÎã§. Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå? [y/N]: " -r
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_info "ÎπåÎìúÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§"
                exit 0
            fi
        fi
    fi
    
    rm -rf "$TEMP_DIR"
    mkdir -p "$TEMP_DIR"
    
    log_success "ÎπåÎìú ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ ÏôÑÎ£å"
}

# ÌååÏùº Î≥µÏÇ¨ Î∞è Ï≤òÎ¶¨
copy_files() {
    log_info "ÌååÏùº Î≥µÏÇ¨ Î∞è Ï≤òÎ¶¨ Ï§ë..."
    
    # ÌïÑÏàò ÌååÏùºÎì§ Î≥µÏÇ¨
    local files_to_copy=(
        "manifest.json"
        "background.js"
        "content.js"
        "popup.html"
        "popup.js"
        "options.html"
        "options.js"
        "styles.css"
        "emailjs.min.js"
    )
    
    for file in "${files_to_copy[@]}"; do
        if [ -f "$file" ]; then
            cp "$file" "$TEMP_DIR/"
            log_debug "Î≥µÏÇ¨Îê®: $file"
        fi
    done
    
    # ÏïÑÏù¥ÏΩò ÎîîÎ†âÌÜ†Î¶¨ Î≥µÏÇ¨
    if [ -d "icons" ]; then
        cp -r "icons" "$TEMP_DIR/"
        log_debug "Î≥µÏÇ¨Îê®: icons/"
    fi
    
    # ÎîîÎ≤ÑÍ∑∏ ÎπåÎìú Ï≤òÎ¶¨
    if [ "$BUILD_TYPE" = "debug" ]; then
        log_info "ÎîîÎ≤ÑÍ∑∏ ÎπåÎìú ÏÑ§Ï†ï Ï†ÅÏö© Ï§ë..."
        # ÎîîÎ≤ÑÍ∑∏Ïö© ÏÑ§Ï†ïÏù¥ÎÇò ÌååÏùº ÏàòÏ†ï Î°úÏßÅ Ï∂îÍ∞Ä Í∞ÄÎä•
    fi
    
    log_success "ÌååÏùº Î≥µÏÇ¨ ÏôÑÎ£å"
}

# Ìå®ÌÇ§ÏßÄ ÌÅ¨Í∏∞ ÏµúÏ†ÅÌôî
optimize_package() {
    log_info "Ìå®ÌÇ§ÏßÄ ÏµúÏ†ÅÌôî Ï§ë..."
    
    # Î∂àÌïÑÏöîÌïú ÌååÏùº Ï†úÍ±∞
    find "$TEMP_DIR" -name ".DS_Store" -delete 2>/dev/null || true
    find "$TEMP_DIR" -name "Thumbs.db" -delete 2>/dev/null || true
    find "$TEMP_DIR" -name "*.tmp" -delete 2>/dev/null || true
    
    # ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏
    local package_size=$(du -sh "$TEMP_DIR" 2>/dev/null | cut -f1 || echo "unknown")
    log_info "Ìå®ÌÇ§ÏßÄ ÌÅ¨Í∏∞: $package_size"
    
    log_success "Ìå®ÌÇ§ÏßÄ ÏµúÏ†ÅÌôî ÏôÑÎ£å"
}

# ZIP ÌååÏùº ÏÉùÏÑ±
create_package() {
    local zip_filename="${PACKAGE_NAME}_v${PACKAGE_VERSION}"
    if [ "$BUILD_TYPE" = "debug" ]; then
        zip_filename="${zip_filename}_debug"
    fi
    zip_filename="${zip_filename}_${TIMESTAMP}.zip"
    
    local zip_path="$OUTPUT_DIR/$zip_filename"
    
    log_info "ZIP ÌååÏùº ÏÉùÏÑ± Ï§ë: $zip_filename"
    
    cd "$TEMP_DIR"
    if zip -r "../$zip_filename" . -x "*.DS_Store" "Thumbs.db" >/dev/null 2>&1; then
        cd "$SCRIPT_DIR"
        
        local zip_size=$(du -sh "$zip_path" 2>/dev/null | cut -f1 || echo "unknown")
        log_success "ZIP ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å!"
        log_info "ÌååÏùº Í≤ΩÎ°ú: $zip_path"
        log_info "ÌååÏùº ÌÅ¨Í∏∞: $zip_size"
        
        # Ìå®ÌÇ§ÏßÄ ÎÇ¥Ïö© ÏöîÏïΩ
        echo ""
        log_info "Ìå®ÌÇ§ÏßÄ ÎÇ¥Ïö©:"
        unzip -l "$zip_path" | grep -E '\.(js|html|css|json|png)$' | awk '{print "  üìÑ " $4}'
        
        return 0
    else
        cd "$SCRIPT_DIR"
        log_error "ZIP ÌååÏùº ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§"
        return 1
    fi
}

# Ï†ïÎ¶¨ ÏûëÏóÖ
cleanup() {
    if [ -n "$TEMP_DIR" ] && [ -d "$TEMP_DIR" ]; then
        log_debug "ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨ Ï§ë..."
        rm -rf "$TEMP_DIR"
    fi
}

# Chrome Web Store Ïó¥Í∏∞
open_chrome_store() {
    if [ "$OPEN_STORE" = true ]; then
        log_info "Chrome Web Store Developer Dashboard Ïó¥Í∏∞..."
        if command -v open >/dev/null 2>&1; then  # macOS
            open "https://chrome.google.com/webstore/developer/dashboard"
        elif command -v xdg-open >/dev/null 2>&1; then  # Linux
            xdg-open "https://chrome.google.com/webstore/developer/dashboard"
        else
            log_info "Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Îã§Ïùå URLÏùÑ Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî:"
            echo "https://chrome.google.com/webstore/developer/dashboard"
        fi
    fi
}

# ChromeÏóê ÏûêÎèô ÏÑ§Ïπò
auto_install() {
    if [ "$AUTO_INSTALL" = true ]; then
        log_info "Chrome ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÌéòÏù¥ÏßÄ Ïó¥Í∏∞..."
        if command -v open >/dev/null 2>&1; then  # macOS
            open "chrome://extensions/"
        elif command -v xdg-open >/dev/null 2>&1; then  # Linux
            xdg-open "chrome://extensions/"
        else
            log_info "ChromeÏóêÏÑú chrome://extensions/ Î•º Ïó¥Í≥† '$SCRIPT_DIR' Ìè¥ÎçîÎ•º Î°úÎìúÌïòÏÑ∏Ïöî"
        fi
    fi
}

# ÏÑ±Í≥µ Î©îÏãúÏßÄ Ï∂úÎ†•
show_success_message() {
    echo ""
    echo -e "${GREEN}=========================================${NC}"
    echo -e "${GREEN}        Ìå®ÌÇ§Ïßï ÏôÑÎ£å! üéâ${NC}"
    echo -e "${GREEN}=========================================${NC}"
    echo ""
    echo -e "üì¶ Ìå®ÌÇ§ÏßÄ: ${WHITE}$PACKAGE_NAME v$PACKAGE_VERSION${NC}"
    echo -e "üèóÔ∏è  ÎπåÎìú ÌÉÄÏûÖ: ${WHITE}$BUILD_TYPE${NC}"
    echo -e "üìÅ Ï∂úÎ†• ÏúÑÏπò: ${WHITE}$OUTPUT_DIR/${NC}"
    echo ""
    echo -e "${CYAN}Îã§Ïùå Îã®Í≥Ñ:${NC}"
    echo -e "1. ÏÉùÏÑ±Îêú ZIP ÌååÏùºÏùÑ Chrome Web StoreÏóê ÏóÖÎ°úÎìú"
    echo -e "2. ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥ ÏûÖÎ†• Î∞è Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∂îÍ∞Ä"
    echo -e "3. Í≤ÄÌÜ† Ï†úÏ∂ú Î∞è ÏäπÏù∏ ÎåÄÍ∏∞"
    echo ""
    echo -e "${YELLOW}Ïú†Ïö©Ìïú ÎßÅÌÅ¨:${NC}"
    echo -e "‚Ä¢ Chrome Web Store: https://chrome.google.com/webstore/developer/dashboard"
    echo -e "‚Ä¢ Í∞úÎ∞úÏûê Í∞ÄÏù¥Îìú: https://developer.chrome.com/docs/webstore/"
}

# Ïã†Ìò∏ Ï≤òÎ¶¨ (Ctrl+C Îì±)
trap cleanup EXIT

# Î©îÏù∏ Ìï®Ïàò
main() {
    echo -e "${CYAN}"
    echo "========================================="
    echo "  myClip Extension Packaging Tool v${VERSION}"
    echo "========================================="
    echo -e "${NC}"
    
    # Ïù∏Ïûê ÌååÏã±
    parse_arguments "$@"
    
    # ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
    log_info "ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨: $SCRIPT_DIR"
    log_info "ÎπåÎìú ÌÉÄÏûÖ: $BUILD_TYPE"
    
    # ÏùòÏ°¥ÏÑ± ÌôïÏù∏
    check_dependencies
    
    # manifest.json Í≤ÄÏ¶ù
    validate_manifest
    
    # ÌååÏùº Í≤ÄÏ¶ù
    validate_files
    
    # Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨Îßå ÏàòÌñâÌïòÎäî Í≤ΩÏö∞
    if [ "$VALIDATE_ONLY" = true ]; then
        log_success "Î™®Îì† Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨Î•º ÌÜµÍ≥ºÌñàÏäµÎãàÎã§! ‚ú®"
        exit 0
    fi
    
    # ÎπåÎìú ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ
    prepare_build_dir
    
    # ÌååÏùº Î≥µÏÇ¨
    copy_files
    
    # Ìå®ÌÇ§ÏßÄ ÏµúÏ†ÅÌôî
    optimize_package
    
    # ZIP ÌååÏùº ÏÉùÏÑ±
    if create_package; then
        # ÏÑ±Í≥µ Î©îÏãúÏßÄ
        show_success_message
        
        # Ï∂îÍ∞Ä ÏûëÏóÖ
        open_chrome_store
        auto_install
    else
        log_error "Ìå®ÌÇ§ÏßïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§"
        exit 1
    fi
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"